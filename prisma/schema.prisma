generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String @unique
  slug        String @unique
  img         String
  grams       Int
  price       Int
  description String
  categoryId  Int?   @map("category_id")
  userId      Int?   @map("user_id")

  productInfo ProductInfo[]
  reviews     Review[]
  orderItems  OrderItem[]

  category Category? @relation(fields: [categoryId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])

  @@map("product")
}

model ProductInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  productId   Int?   @map("product_id")

  product Product? @relation(fields: [productId], references: [id])

  @@map("product_info")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]

  @@map("category")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name       String
  email      String  @unique
  password   String
  avatarPath String? @map("avatar_path")
  phone      String  @default("")

  reviews   Review[]
  roles     UserRoles[]
  orders    Order[]
  favorites Product[]

  @@map("user")
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  value       String @unique @default("Customer")
  description String

  users UserRoles[]

  @@map("role")
}

model UserRoles {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  @@id([userId, roleId])
  @@map("user_roles")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating    Int
  comment   String
  productId Int?   @map("product_id")
  userId    Int?   @map("user_id")

  product Product? @relation(fields: [productId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  @@map("review")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  userId Int             @map("user_id")

  items OrderItem[]

  user User @relation(fields: [userId], references: [id])

  @@map("order")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity  Int
  price     Int
  orderId   Int? @map("order_id")
  productId Int  @map("product_id")

  order   Order?   @relation(fields: [orderId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
